import json
import aiofiles
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from settings import *
from fsm import *
from wordle_module import wordle, utils
import datetime
from io import BytesIO
import asyncio
import aioschedule

class PushState(StatesGroup):
    input_for_push = State()
    input_file = State()
    input_pic = State()
    wait = State()
    preview = State()

class EditPush(StatesGroup):
    edit_text = State()
    edit_file = State()
    edit_pic = State()
    wait = State()

words = [
    '–≥–µ—Ä–æ–π',
    '—à–∫–æ–ª–∞', 
    '–±—É–ª–∫–∞',
    '—é–Ω–æ—à–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞'
]
last_images = {}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω!')
    else:
        id = await new_player(message.from_user.id)
        await message.answer(f'''
–ü—Ä–∏–≤–µ—Ç ü•ê

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö!

–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–∂–¥–æ–º —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –•–õ–ï–ë–ò–ö–ò (–•–ë) - –Ω–∞—à—É –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —è—Ä–º–∞—Ä–∫–µ –≤ –¥–µ–Ω—å —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (:
–•–ª–µ–±–∏–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ö–ê–ñ–î–´–ô —Ä–∞–∑ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏, –∞ –ø—Ä–∏ –ü–û–ë–ï–î–ï –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–î–í–ê–ò–í–ê–ï–¢–°–Ø!

–ß—Ç–æ–±—ã —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö!

–£—á–∞—Å—Ç–≤—É–π –≤ –∫–∞–∂–¥–æ–º, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–∞–∫–ª–µ–µ–∫ –Ω–∞—à–µ–≥–æ –•–õ–ï–ë–ù–û–ì–û –ü–ê–°–°–ê –∏ –ø–æ–ª—É—á–∏—Ç—å –ì–õ–ê–í–ù–´–ô –ü–†–ò–ó!

–¢–≤–æ–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞: {id}

–ê —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö ü´∂üèª''')

@dp.message_handler(commands=['balance'])
async def start(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω!')
    else:
        user = await get_player(message.from_user.id)
        await message.answer(f'''
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user["balance"]} –•–ë
–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!''')

@dp.message_handler(commands=['id'])
async def start(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω!')
    else:
        user = await get_player(message.from_user.id)
        await message.answer(f'''
–¢–≤–æ–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞: {user["id"]}
''')

@dp.message_handler(commands=['comp'])
async def competition(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMINS_ID:
        await message.answer('–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 11-2 team!')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞:')
    await state.set_state(IncreaseBalanceState.player_id)

async def pushText(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMINS_ID:
        await message.answer('–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 11-2 team!')
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É—à–∞")
    await state.set_state(PushState.input_for_push)
    await state.update_data( text = None )
    await state.update_data( photo = None )
    await state.update_data( file = None )

async def pre_push(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get( 'text' )
    photo  = data.get( 'photo' )
    file = data.get( 'file' )

    kb = InlineKeyboardMarkup()

    if photo == None:
        kb.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data="add_pic"))
    if file == None:
        kb.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª', callback_data="add_file"))
    if photo != None:
        kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data="del_pic"))
    if file != None:
        kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª', callback_data="del_file"))

    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="cancel_push"))
    kb.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="send_push"))
    
    print( photo )
    await message.answer(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è\n")
    if photo ==  None and file==None:
        await message.answer(f"{text}", reply_markup=kb)
    elif photo != None and file == None:
        await bot.send_photo(message.chat.id, photo, caption=text, reply_markup=kb)
    elif photo == None and file != None:
        await bot.send_document(message.chat.id, file, caption=text, reply_markup=kb)
    else:
        await bot.send_photo(message.chat.id, photo, caption=text)
        await bot.send_document(message.chat.id, file, reply_markup=kb)
        
    

async def getText(message: Message, state: FSMContext):
    await state.update_data(text = message.text)
    await pre_push( message, state )
    await state.set_state(PushState.preview)



async def add_pic(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.', show_alert=True)
    await state.set_state(PushState.input_pic)

async def add_file(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.', show_alert=True)
    await state.set_state(PushState.input_file)


async def pushPic(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(photo = message.photo[-1].file_id)
        await pre_push( message, state )
        await state.set_state(PushState.preview)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")

async def pushFile(message: Message, state: FSMContext):
    if message.document:
        await state.update_data(file = message.document.file_id)
        await pre_push( message, state )
        await state.set_state(PushState.preview)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
 

async def cancel_push(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.reset_state()
    await state.reset_data()
    await state.reset_state()
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def send_push(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    file = data.get('file')
    text = data.get('text')

    # –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    # –∫–∞—Ä—Ç–∏–Ω–∫–∞, —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–¥–∏–Ω—ã–º —Ü–µ–ª—ã–º –∫–∞–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    if photo ==  None and file==None:
        for i in await get_all_tg_users():
            try: await bot.send_message(i[0], f"{text}")
            except: pass
    elif photo != None and file == None:
        for i in await get_all_tg_users():
            try: await bot.send_photo(i[0], photo, caption=text)
            except: pass
    elif photo == None and file != None:
        for i in await get_all_tg_users():
            try: await bot.send_document(i[0], file, caption=text)
            except: pass
    else:
        for i in await get_all_tg_users():
            try:
                await bot.send_photo(i[0], photo, caption=text)
                await bot.send_document(i[0], file)
            except: pass
    await state.reset_state()
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

async def view_push(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    file = data.get('file')
    text = data.get('text')
    if photo:
        await bot.send_photo(callback.from_user.id, photo, caption=text)
    if file:
        await bot.send_document(callback.from_user.id, file, caption=text)
    if not file and not photo:
        await bot.send_message(callback.from_user.id, text)

async def del_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    if photo != None:
        await state.update_data(photo = None)
    await callback.answer('–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ')
    await pre_push(callback.message, state)

async def del_file(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    file = data.get('file')
    if file != None:
        await state.update_data(file = None)
    await callback.answer('–§–∞–π–ª —É–¥–∞–ª–µ–Ω')
    await pre_push(callback.message, state)



@dp.message_handler(state=IncreaseBalanceState.player_id)
async def process_player_id(message: Message, state: FSMContext):
    await state.update_data(player_id = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:')
    await state.set_state(IncreaseBalanceState.balance)

@dp.message_handler(state=IncreaseBalanceState.balance)
async def process_balance(message: Message, state: FSMContext):
    player_id = (await state.get_data())['player_id']
    balance = int(message.text)
    await state.finish()
    player = await get_player_by_player_id(player_id)
    if player == False:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º player_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    await increase_balance(player_id, money=balance)
    await message.answer('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!')
    await bot.send_message(int(player['user_id']), f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance} –•–ë!')

@dp.message_handler(commands=['play'])
async def play(message: Message, state: FSMContext):
    if datetime.date.today().weekday() > 4:
        await message.answer('–ê–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!')
        return
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–í—ã –∞–¥–º–∏–Ω, –∞ –Ω–µ –∏–≥—Ä–æ–∫!')
        return
    if not await can_play(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ –ø–æ–ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!')
        return
    await message.answer('–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã: –∏–≥—Ä–æ–∫—É –¥–∞–µ—Ç—Å—è –ø—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ. –õ—é–±–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ –±—É–∫–≤–∞ —É–≥–∞–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∞ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º, –µ—Å–ª–∏ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–µ –≤ —Ç–æ–º –º–µ—Å—Ç–µ, —Ç–æ –∂–µ–ª—Ç—ã–º, –∞ –µ—Å–ª–∏ –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–µ—Ä—ã–º.')
    await message.answer('–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ!')
    await state.set_state(GameState.word)

@dp.message_handler(state=GameState.word)
async def process_word(message: Message, state: FSMContext):
    player = await get_player(message.from_user.id)
    if len(message.text) != 5:
        await message.answer('–í –≤–≤–µ–¥—ë–Ω–Ω–æ–º —Å–ª–æ–≤–µ –Ω–µ 5 –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ')
        await state.set_state(GameState.word)
        return
    obj = wordle.Main(limg=last_images.get(message.from_user.id),attemps_already=5-player['attemps'], target_word=words[datetime.date.today().weekday()],colormap = ["#fff", "#c0bcbc", "#14b31c", "#d4bd11", "#fff"], font_size = 45)
    result = obj.check(message.text.lower())
    last_images[message.from_user.id] = result['image']
    bio = BytesIO()
    bio.name = 'image.jpeg'
    result['image'].img.save(bio, 'JPEG')
    bio.seek(0)
    await bot.send_photo(message.from_user.id, photo=bio)
    if result['is_correct']:
        await update_attemps(player['id'], 0)
        await increase_balance(player['id'], 50)
        await message.answer('–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 –•–ë! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')
        await state.finish()
    else:
        await decrement_attemps(player_id=player['id'])
        if not await can_play(message.from_user.id):
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ(\n–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ {words[datetime.date.today().weekday()]}. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞—ë—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')
            await state.finish()
            return
        await message.answer(f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player["attemps"]-1}. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
        await state.set_state(GameState.word)    

async def is_user_exist(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if i['user_id'] == str(user_id):
            return i
    return False

async def new_player(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    id = len(data) + 1
    if id < 10:
        id = f'00{id}'
    elif id < 100:
        id = f'0{id}'
    else:
        id = str(id)
    data.append({
        'id': id,
        'user_id': str(user_id),
        'balance': 0,
        'attemps': 5
    })
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))
    return id

async def get_player(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if str(i['user_id']) == str(user_id):
            return i
    return False

async def get_player_by_player_id(player_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if str(i['id']) == str(player_id):
            return i
    return False

async def increase_balance(player_id, money):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['balance'] += money
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def update_attemps(player_id, new_attemps):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['attemps'] = new_attemps
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def decrement_attemps(player_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['attemps'] -= 1
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def can_play(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['user_id']) == str(user_id):
            if i['attemps'] < 1: return False
            else: return True
            
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def reset_attemps():
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        data[n]['attemps'] = 5
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def get_all_tg_users():
    data = []
    users = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        users.append(int(i['user_id']))
            

async def sender():
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if i['attemps'] == 5:
            await bot.send_message(int(i['user_id']), '–£ —Ç–µ–±—è –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏–≥—Ä–µ, –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –•–õ–ï–ë–ò–ö–ò)\n–ß—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /play')

async def scheduler():
    aioschedule.every(1).day.at('00:00').do(reset_attemps)
    aioschedule.every(1).day.at('12:00').do(sender)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_start(_):
    dp.register_message_handler(pushText, lambda message: message.text == '/push')
    dp.register_message_handler(getText, state=PushState.input_for_push, content_types=ContentType.ANY)
    dp.register_message_handler(pushFile, state=PushState.input_file, content_types=ContentType.ANY)
    dp.register_message_handler(pushPic, state=PushState.input_pic, content_types=ContentType.ANY)
    dp.register_callback_query_handler(cancel_push, lambda callback: callback.data == 'cancel_push', state=PushState.wait)
    dp.register_callback_query_handler(send_push, lambda callback: callback.data == 'send_push', state=PushState.preview)
    dp.register_callback_query_handler(view_push, lambda callback: callback.data == 'view_push', state=PushState.wait)

    dp.register_callback_query_handler(cancel_push, lambda callback: callback.data == 'cancel_push', state=PushState.preview)
    dp.register_callback_query_handler(add_pic, lambda callback: callback.data == 'add_pic', state=PushState.preview)
    dp.register_callback_query_handler(add_file, lambda callback: callback.data == 'add_file', state=PushState.preview)

    dp.register_callback_query_handler(del_photo, lambda callback: callback.data == 'del_pic', state=PushState.preview)
    dp.register_callback_query_handler(del_file, lambda callback: callback.data == 'del_file', state=PushState.preview)
    asyncio.create_task(scheduler())

executor.start_polling(dp, skip_updates=True, on_startup=on_start)