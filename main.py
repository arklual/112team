import json
import aiofiles
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from settings import *
from fsm import *
from wordle_module import wordle, utils
import datetime
from io import BytesIO
import asyncio
import aioschedule

words = [
    '–≥–µ—Ä–æ–π',
    '—à–∫–æ–ª–∞', 
    '–±—É–ª–∫–∞',
    '—é–Ω–æ—à–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞',
    '–≥–ª—ã–±–∞'
]
last_images = {}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω!')
    else:
        id = await new_player(message.from_user.id)
        await message.answer(f'''
–ü—Ä–∏–≤–µ—Ç ü•ê

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö!

–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–∂–¥–æ–º —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –•–õ–ï–ë–ò–ö–ò (–•–ë) - –Ω–∞—à—É –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —è—Ä–º–∞—Ä–∫–µ –≤ –¥–µ–Ω—å —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (:
–•–ª–µ–±–∏–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ö–ê–ñ–î–´–ô —Ä–∞–∑ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏, –∞ –ø—Ä–∏ –ü–û–ë–ï–î–ï –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–î–í–ê–ò–í–ê–ï–¢–°–Ø!

–ß—Ç–æ–±—ã —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö!

–£—á–∞—Å—Ç–≤—É–π –≤ –∫–∞–∂–¥–æ–º, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–∞–∫–ª–µ–µ–∫ –Ω–∞—à–µ–≥–æ –•–õ–ï–ë–ù–û–ì–û –ü–ê–°–°–ê –∏ –ø–æ–ª—É—á–∏—Ç—å –ì–õ–ê–í–ù–´–ô –ü–†–ò–ó!

–¢–≤–æ–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞: {id}

–ê —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö ü´∂üèª''')

@dp.message_handler(commands=['balance'])
async def start(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω!')
    else:
        user = await get_player(message.from_user.id)
        await message.answer(f'''
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user["balance"]} –•–ë
–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!''')

@dp.message_handler(commands=['comp'])
async def competition(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMINS_ID:
        await message.answer('–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 11-2 team!')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞:')
    await state.set_state(IncreaseBalanceState.player_id)

@dp.message_handler(state=IncreaseBalanceState.player_id)
async def process_player_id(message: Message, state: FSMContext):
    await state.update_data(player_id = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:')
    await state.set_state(IncreaseBalanceState.balance)

@dp.message_handler(state=IncreaseBalanceState.balance)
async def process_balance(message: Message, state: FSMContext):
    player_id = (await state.get_data())['player_id']
    balance = int(message.text)
    await state.finish()
    player = await get_player_by_player_id(player_id)
    if player == False:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º player_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    await increase_balance(player_id, money=balance)
    await message.answer('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!')
    await bot.send_message(int(player['user_id']), f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance} –•–ë!')

@dp.message_handler(commands=['play'])
async def play(message: Message, state: FSMContext):
    if datetime.date.today().weekday() > 10:
        await message.answer('–ê–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!')
        return
    if str(message.from_user.id) in ADMINS_ID:
        await message.answer('–í—ã –∞–¥–º–∏–Ω, –∞ –Ω–µ –∏–≥—Ä–æ–∫!')
        return
    if not await can_play(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ –ø–æ–ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!')
        return
    await message.answer('–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ!')
    await state.set_state(GameState.word)

@dp.message_handler(state=GameState.word)
async def process_word(message: Message, state: FSMContext):
    player = await get_player(message.from_user.id)
    if len(message.text) != 5:
        await message.answer('–í –≤–≤–µ–¥—ë–Ω–Ω–æ–º —Å–ª–æ–≤–µ –Ω–µ 5 –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ')
        await state.set_state(GameState.word)
        return
    obj = wordle.Main(limg=last_images.get(message.from_user.id),attemps_already=5-player['attemps'], target_word=words[datetime.date.today().weekday()],colormap = ["#fff", "#c0bcbc", "#14b31c", "#d4bd11", "#fff"], font_size = 45)
    result = obj.check(message.text.lower())
    last_images[message.from_user.id] = result['image']
    bio = BytesIO()
    bio.name = 'image.jpeg'
    result['image'].img.save(bio, 'JPEG')
    bio.seek(0)
    await bot.send_photo(message.from_user.id, photo=bio)
    if result['is_correct']:
        await update_attemps(player['id'], 0)
        await increase_balance(player['id'], 3)
        await message.answer('–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –•–ë! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')
        await state.finish()
    else:
        await decrement_attemps(player_id=player['id'])
        if not await can_play(message.from_user.id):
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ(\n–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ {words[datetime.date.today().weekday()]}. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞—ë—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')
            await state.finish()
            return
        await message.answer(f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player["attemps"]-1}. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
        await state.set_state(GameState.word)    

async def is_user_exist(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if i['user_id'] == str(user_id):
            return i
    return False

async def new_player(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    id = len(data) + 1
    if id < 10:
        id = f'00{id}'
    elif id < 100:
        id = f'0{id}'
    else:
        id = str(id)
    data.append({
        'id': id,
        'user_id': str(user_id),
        'balance': 0,
        'attemps': 5
    })
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))
    return id

async def get_player(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if str(i['user_id']) == str(user_id):
            return i
    return False

async def get_player_by_player_id(player_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for i in data:
        if str(i['id']) == str(player_id):
            return i
    return False

async def increase_balance(player_id, money):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['balance'] += money
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def update_attemps(player_id, new_attemps):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['attemps'] = new_attemps
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def decrement_attemps(player_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['id']) == str(player_id):
            data[n]['attemps'] -= 1
            break
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def can_play(user_id):
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if str(i['user_id']) == str(user_id):
            if i['attemps'] < 1: return False
            else: return True
            
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def reset_attemps():
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        data[n]['attemps'] = 5
    async with aiofiles.open('players.json', 'w', encoding='utf-8') as fp:
        await fp.write(json.dumps(data, ensure_ascii=False))

async def sender():
    data = []
    async with aiofiles.open('players.json', 'r', encoding='utf-8') as fp:
        data = json.loads(await fp.read())
    for n, i in enumerate(data):
        if i['attemps'] == 5:
            await bot.send_message(int(i['user_id']), '–£ —Ç–µ–±—è –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏–≥—Ä–µ, –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –•–õ–ï–ë–ò–ö–ò)\n–ß—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /play')

async def scheduler():
    aioschedule.every(1).day.at('00:00').do(reset_attemps)
    aioschedule.every(1).day.at('12:00').do(sender)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_start(_):
    asyncio.create_task(scheduler())

executor.start_polling(dp, skip_updates=True, on_startup=on_start)